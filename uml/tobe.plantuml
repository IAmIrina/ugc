@startuml
skinparam componentStyle uml2

title Приложение Movies 'TO BE'

component AdminPanel #Yellow

' База Данных Фильмов
database "Postgre БД Фильмов" as PostgreMovies #Lightblue {
component FilmworkTable
component GenreTable
component PersonTable
component GenreFilmworkTable
component PersonFilmworkTable
}

database "Elastic: Полнотекстовый поиск" as ElasticSearch #Lightblue
database "Redis" as RedisSearchCashing #Red



' Компоненты FastAPI
component FastApi #Green
interface SearchInterface #Green
interface "API Просмотров Фильмов" as ViewsInterface #Green

' Компоненты сервиса аутентификации
package AuthService {
database "Redis: Стоп-листы для токенов" as RedisTokens #Red
database "Postgres: Данные Юзеров" as PostgreUsers #Lightblue
component FlaskAuth #Green
component Jaeger #Orange
component "OAuth 2.0" as OAuth #Blue
}

' Компоненты сервиса UGC
package UserGeneratedContent {
component "OLTP(Kafka)" as Kafka
note right
Содержит топик 'views'
Партицирована по ключу 'user_id+movie_id'
end note
component "OLAP: Clickhouse" as CH
}

cloud "Провайдеры" as Providers

interface AuthApi #Yellow


' Взаимодействия
AdminPanel <--> PostgreMovies

ElasticSearch <-- PostgreMovies: "ETL System" 
ElasticSearch <--> RedisSearchCashing: Кэширование
ElasticSearch -up-> FastApi

SearchInterface <- FastApi
ViewsInterface <-- FastApi

' Взаимодействия внутри AuthService
AuthService -[thickness=2]> AuthApi: Интерфейс
FastApi <-> AuthApi
note right
RestAPI
- CRUD Пользователей, Ролей
- Работа с JWT токенами
end note
FlaskAuth <-- PostgreUsers
FlaskAuth <-- RedisTokens

OAuth .> Providers

' Взаимодействия UGC
Kafka --> ViewsInterface
Kafka -left-> CH: ETL

@enduml
